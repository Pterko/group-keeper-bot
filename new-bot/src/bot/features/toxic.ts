import { Composer } from "grammy";
import { Context } from "#root/bot/context.js";
import { toxicModel } from "#root/models/toxic.js";

const composer = new Composer<Context>();

composer.hears([/^—Ç–æ–∫—Å$/i, /^—Ç–æ–∫—Å–∏–∫$/i, /^—Ç–æ–∫—Å–∏—á–Ω–æ$/i, /^—Ç–æ–∫—Å–∏—á–Ω–µ–Ω—å–∫–æ$/i], async (ctx, next) => {
  console.log('—Ç–æ–∫—Å —Ä–µ—Å–∏–≤–µ–¥', ctx.message);

  if (!ctx.message) {
    return await next();
  }

  // skip for —Ç–∞—á
  if (ctx.message.chat.id === -1001526858418) {
    return await next();
  }

  if (!ctx.message?.reply_to_message?.from?.id) {
    await ctx.reply("–ê –∫—Ç–æ —Ç–æ–∫—Å–∏–ª-—Ç–æ? –†–µ–ø–ª–∞–π–Ω–∏ –Ω–∞ –Ω–µ–≥–æ.", { reply_to_message_id: ctx.message.message_id });
    return await next();
  }
  if (ctx.message?.reply_to_message?.from?.id === ctx.message?.from?.id) {
    await ctx.reply("–¢—ã –¥–µ–±–∏–ª —Å–∞–º –Ω–∞ —Å–µ–±—è —Ç–æ–∫—Å–∏—Ç—å?", { reply_to_message_id: ctx.message.message_id });
    return await next();
  }

  const updatedToxic = await toxicModel.findOneAndUpdate({
    userId: ctx.message.reply_to_message.from.id,
    chatId: ctx.message.chat.id
  }, {
    $inc: { toxicCounter: 1 },
    first_name: ctx.message.reply_to_message.from.first_name
  }, { new: true, upsert: true });

  await ctx.reply(`–£—É—É—É, –∂—ë—Å—Ç–∫–∏–π —Ç–æ–∫—Å. –Ø –¥–æ–±–∞–≤–∏–ª ${ctx.message.reply_to_message.from.first_name} –æ—á–∫–æ —Ç–æ–∫—Å–∞. –°—á—ë—Ç: ${updatedToxic.toxicCounter}`, { reply_to_message_id: ctx.message.message_id });
  await next();
});

composer.command('toxic', async (ctx, next) => {
  if (!ctx.message) {
    return await next();
  }
  // skip for —Ç–∞—á
  if (ctx.message.chat.id === -1001526858418) {
    await ctx.reply('–≠—Ç–∞ —Ñ–∏—á–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ', { disable_notification: true });
    return await next();
  }

  const toxicTable = await toxicModel.find({ chatId: ctx.message.chat.id }).sort({ toxicCounter: 'desc' }).limit(10).exec();

  let text = `–¢–æ–ø-10 —Ç–æ–∫—Å–∏–∫–æ–≤ —ç—Ç–æ–≥–æ —á–∞—Ç–∞:\r\n`;
  for (const [index, toxicMan] of toxicTable.entries()) {
    text += `${(index === 0 ? 'ü•á' : '')}${(index === 1 ? 'ü•à' : '')}${(index === 2 ? 'ü•â' : '')} [${toxicMan.first_name}](tg://user?id=${toxicMan.userId}) - ${toxicMan.toxicCounter} –æ—á–∫–æ–≤ \r\n`;
  }

  await ctx.reply(text, { parse_mode: 'Markdown', disable_notification: true });
});

export { composer as toxicFeature };